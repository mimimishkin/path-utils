package path.utils.paths

import path.utils.math.Tolerance
import path.utils.math.Vec2
import path.utils.math.near
import kotlin.random.Random
import kotlin.test.Test

class TransformedPathKtTest {
    private val path = path("M4 8 10 1 13 0 12 3 5 9C6 10 6 11 7 10 7 11 8 12 7 12A1.42 1.42 0 016 13 5 5 0 004 10Q3.5 9.9 3.5 10.5T2 11.8 1.2 11 2.5 9.5 3 9A5 5 90 000 7 1.42 1.42 0 011 6C1 5 2 6 3 6 2 7 3 7 4 8M10 1 10 3 12 3 10.2 2.8 10 1")
    val trueScaled = path

    @Test
    fun translate() {
        val (x, y, w, h) = path.bounds
        val tx = Random.nextDouble()
        val ty = Random.nextDouble()
        val (nx, ny, nw, nh) = path.translate(tx, ty).bounds

        assert(x + tx near nx)
        assert(y + ty near ny)
        assert(w near nw)
        assert(h near nh)
    }

    @Test
    fun scale() {
        val random = Random(4642)
        val sx = random.nextDouble()
        val sy = random.nextDouble()
        val scaled = path.scale(sx, sy)

        Tolerance = 1e-5
        assert(scaled.zip(trueScaled).all { (value: Command, expected: Command) ->
            value.arguments.zip(expected.arguments).all { it.first near it.second }
        })
    }

    @Test
    fun scaleWithAnchor() {
        val random = Random(4642)
        val sx = random.nextDouble()
        val sy = random.nextDouble()
        val cx = random.nextDouble()
        val cy = random.nextDouble()
        val scaled = path.scale(sx, sy, anchor = Vec2(cx, cy))
        val scaled2 = path.translate(-cx, -cy).scale(sx, sy).translate(cx, cy)

        assert(scaled.zip(scaled2).all { (value: Command, expected: Command) ->
            value.arguments.zip(expected.arguments).all { it.first near it.second }
        })
    }
}